# -*- coding: utf-8 -*-
"""Całkowanie monte carlo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1emH_Ewvp7jAAzZGoZrZw_nyNJnxydN-Y
"""

import numpy as np
import matplotlib.pyplot as plt

def calka_monte_carlo(ax,bx,ay,by,f,n):
  list_x = np.random.uniform(ax, bx, n)
  list_y = np.random.uniform(ay ,by, n) # listy z losowymi współrzędnymi x i y punków w obrębie prostokąta (bx-ax) x (by-ay)

  trafione = 0
  lista_trafionych_x = []
  lista_trafionych_y = []
  lista_nie_trafionych_x = []
  lista_nie_trafionych_y = []

  for i in range(0,n):
    if f(list_x[i]) > 0:
      if list_y[i] < f(list_x[i]) and list_y[i] > 0:
        trafione += 1                #sprawdzanie czy dany punkt jest nad wykresem funkcji czy pod - jeśli pod to liczymy go jako trafiony
        lista_trafionych_x.append(list_x[i])
        lista_trafionych_y.append(list_y[i])
      else:
        lista_nie_trafionych_x.append(list_x[i])
        lista_nie_trafionych_y.append(list_y[i])
    else:
      if list_y[i] > f(list_x[i]) and list_y[i] < 0:
        trafione -= 1
        lista_trafionych_x.append(list_x[i])
        lista_trafionych_y.append(list_y[i])
      else:
        lista_nie_trafionych_x.append(list_x[i])
        lista_nie_trafionych_y.append(list_y[i])

  pole_prostokata = abs((bx-ax)*(by-ay))
  pole = (trafione/n)*pole_prostokata

  x_points = []
  y_points = []

  k = ax
  while k < bx:
    x_points.append(k)
    y_points.append(f(k))
    k += 0.05

  plt.plot(lista_trafionych_x, lista_trafionych_y, 'o', markersize = 2, color = 'red')
  plt.plot(lista_nie_trafionych_x, lista_nie_trafionych_y, 'o', markersize = 2, color = 'orange')
  plt.plot(x_points,y_points, color = 'blue')
  plt.axis([ax,bx,ay,by])
  plt.show

  return f'Pole = {pole}'

print(calka_monte_carlo(-3, 3, 0, 1, lambda x: np.e**(-x**2), 10000))

print(calka_monte_carlo(0, 2*np.pi, -1, 1, lambda x: np.sin(x), 100000))

print(calka_monte_carlo(-2, 2, -3, 1, lambda x: -x**2 + 1, 100000))

def wykres(f, a, b):
  x_points = []
  y_points = []
  k = a
  while k < b:
    x_points.append(k)
    y_points.append(f(k))
    k += 0.05
  plt.plot(x_points,y_points)

print(wykres(lambda x: x**2, -2 , 2))